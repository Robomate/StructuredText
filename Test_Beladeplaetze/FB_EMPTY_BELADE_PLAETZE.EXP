
(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/_Fast Folder\/E_A_Punkte_mappen\/Beladeplatz Liegeware' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK FB_EMPTY_BELADE_PLAETZE
(*
	Dieser FB leert die Beladeplaetze mit dem Emergency Programm aus dem Beladeplatz Standard.

$Version

! Bugfix
+ Extension/modification
§§
Date        | Version  | created under       | Author         | Remark
============+==========+=====================+================+===================================================================
01/09/2019  | 1.0.0    | V2.11.0 (Build 2258)| Korf        	  | first release.
------------+----------+---------------------+----------------+-------------------------------------------------------------------
            |          |                     |                | 
$

(*-------------------------------------------------------------------------------------------------
	Overview: Inductions

	Beladeplatz Liegeware 05 (Pos.: 801050, Level 2, OSR)
	Beladeplatz Liegeware 06 (Pos.: 801060, Level 2, OSR)
	Beladeplatz Liegeware 07 (Pos.: 801070, Level 2, OSR)
	Beladeplatz Liegeware 08 (Pos.: 801080, Level 2, OSR)
	Beladeplatz Liegeware 09 (Pos.: 801090, Level 2, OSR)
	Beladeplatz Liegeware 10 (Pos.: 801100, Level 2, OSR)
	Beladeplatz Liegeware 11 (Pos.: 801110, Level 2, OSR)
	Beladeplatz Liegeware 12 (Pos.: 801120, Level 2, OSR)
	Beladeplatz Liegeware 13 (Pos.: 801130, Level 2, OSR)
	Beladeplatz Liegeware 14 (Pos.: 801140, Level 2, OSR)
	Beladeplatz Liegeware 15 (Pos.: 801150, Level 2, OSR)
	Beladeplatz Liegeware 16 (Pos.: 801160, Level 2, OSR)
	Beladeplatz Liegeware 17 (Pos.: 802010, Level 1, OSR)
	Beladeplatz Liegeware 18 (Pos.: 802020, Level 1, OSR)
	Beladeplatz Liegeware 21 (Pos.: 803030, Level 1, Pickbuffer)
	Beladeplatz Liegeware 22 (Pos.: 803040, Level 1, Pickbuffer)
	Beladeplatz Liegeware 23 (Pos.: 803050, Level 1, Pickbuffer)
	Beladeplatz Liegeware 24 (Pos.: 803060, Level 1, Pickbuffer)
	Beladeplatz Liegeware 25 (Pos.: 803070, Level 1, Pickbuffer)
	Beladeplatz Liegeware 26 (Pos.: 803080, Level 1, Pickbuffer)
	Beladeplatz Liegeware 27 (Pos.: 805010, Level 0, OSR XXL )
	Beladeplatz Liegeware 28 (Pos.: 805020, Level 0, OSR XXL)
--------------------------------------------------------------------------------------------------*)
*)
VAR CONSTANT
	c_sBAUSTEIN						: STRING := 'P_EMPTY_BELADE_PLAETZE';

END_VAR

VAR_INPUT

	i_num_induct : UDINT; (* Number of Induction *)

END_VAR

VAR_OUTPUT
  i_cycle_finished : INT;  (* Cycle completed *)
END_VAR


VAR_STAT

	udiCallCnt		: UDINT;				(* Anzahl der Bausteinaufrufe *)

END_VAR


VAR

	wait 	: TON; (* delay function *)
	CNT 	: INT := 0; (* current state of state-machine *)

END_VAR
(* @END_DECLARATION := '0' *)
(*################################################################################################*)
	udiCallCnt := udiCallCnt + 1;
	g_iCallStackpointer := g_iCallStackpointer + 1;
	g_asCallStack[g_iCallStackpointer] := c_sBAUSTEIN;
(*################################################################################################*)


(*  Emtpy Induction Stations by Emergency Program from Induction Standard  *)

CASE CNT OF
	0: (* init     *)

		i_cycle_finished := 1;
		CNT := CNT + 1;

	1: (* Push Stop Button     *)

		i_cycle_finished := 0;
		st_inductions.a_stop_buttons[i_num_induct] := FALSE; (* Push Stop Button *)

		wait(IN:=TRUE, PT:=T#6s);

		IF wait.Q THEN
			wait(IN:=FALSE);
			CNT := CNT + 1;
		END_IF;

  	 2: (* Break 01     *)

		i_cycle_finished := 0;
   		st_inductions.a_stop_buttons[i_num_induct] := TRUE; (* Release Stop Button *)

     	wait(IN:=TRUE, PT:=T#500ms);

		IF wait.Q THEN
			wait(IN:=FALSE);
			CNT := CNT + 1;
		END_IF;

   	3:  (*  Push Start Button    *)

		i_cycle_finished := 0;
		st_inductions.a_start_buttons[i_num_induct] := TRUE; (* Push Start Button *)

     	wait(IN:=TRUE, PT:=T#1s);

     	IF wait.Q THEN
     		wait(IN:=FALSE);
     		CNT := CNT + 1;
     	END_IF;

  	 4: (* Release Start Button    *)

		i_cycle_finished := 0;
   		st_inductions.a_start_buttons[i_num_induct] := FALSE; (* Release Start Button *)

   		wait(IN:=TRUE, PT:=T#5s);

   		IF wait.Q THEN
   			wait(IN:=FALSE);
   			CNT := CNT + 1;
   		END_IF;

	5: (* Press Stop Button again   *)

		i_cycle_finished := 0;
   		st_inductions.a_stop_buttons[i_num_induct] := FALSE; (* Push Stop Button *)

   		wait(IN:=TRUE, PT:=T#500ms);

   		IF wait.Q THEN
   			wait(IN:=FALSE);
   			CNT := CNT + 1;
   		END_IF;

	6: (* Final Break 02   *)

		i_cycle_finished := 0;
		st_inductions.a_stop_buttons[i_num_induct] := TRUE; (* Release Stop Button *)

   		wait(IN:=TRUE, PT:=T#500ms);

   		IF wait.Q THEN
   			wait(IN:=FALSE);
   			CNT := CNT + 1;
   		END_IF;

	 ELSE
		i_cycle_finished := 1;
		CNT := 0;

END_CASE;

(*################################################################################################*)
	g_asCallStack[g_iCallStackpointer] := '';
	g_iCallStackpointer := g_iCallStackpointer - 1;
(*################################################################################################*)
END_FUNCTION_BLOCK
